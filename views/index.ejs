<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Use correct character set. -->
  <meta charset="utf-8">
  <!-- Tell IE to use the latest, best version. -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!-- Make the application on mobile take up the full browser screen and disable user scaling. -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
  <title>UnderGround</title>
  <script src="/Build/Cesium/Cesium.js"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.0/jquery-ui.min.js"></script>
  <style>
      @import url(/Build/Cesium/Widgets/widgets.css);
      html, body, #cesiumContainer {
          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;
      }
  </style>
</head>
<body>
  <div id="cesiumContainer"></div>
  <div id="divCredit" style="display: none;"></div>
  <script>
   var data = {};

   data.state = {
     "underground"        : { "color" : "BLACK", "outlinecolor" : "WHITE", "flashing" : false, "alpha" : 0.5 },
     "reception-west"     : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "nonlethal"          : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "drone"              : { "color" : "BLACK", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "reception-east"     : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "outside-west"       : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "outside-north-west" : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "retractable-door"   : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "outside-north"      : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "outside-north-east" : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "dirtywerx-ramp"     : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "dirtywerx-north"    : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "dirtywerx-south"    : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "thunderdrone-east"  : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "thunderdrone-west"  : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 },
     "staff-area"         : { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 }
   };

    var viewer = new Cesium.Viewer('cesiumContainer', {
      animation : false,
      creditContainer: "divCredit",
      homeButton: false,
      instructionsInitiallyVisible : false,
      navigationHelpButton: false,
      infoBox : true,
      selectionIndicator : true,
      timeline : false,
      baseLayerPicker: false,
      imageryProvider: Cesium.createOpenStreetMapImageryProvider({
          url : 'https://stamen-tiles.a.ssl.fastly.net/toner-background/',
          credit : 'Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under CC BY SA.'
      })
    });

    var scene = viewer.scene;

    var devices = {};

    var lat = -82.4371562;
    var lon = 27.9563611;

        // url : '/models/Global_SOFWERX.glb',
    var center = Cesium.Cartesian3.fromDegrees(lat, lon, 0.0);
    var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(center);
    var model = Cesium.Model.fromGltf({
        url : '/models/underground.glb',
        modelMatrix : modelMatrix,
        scale : 0.4
    });
    model.colorBlendMode = Cesium.ColorBlendMode.HIGHLIGHT;
    model.colorBlendAmount = 0.5;
    scene.globe.depthTestAgainstTerrain = true;
    devices["underground"] = scene.primitives.add(model);
    var heading = Cesium.Math.toRadians(160.0);
    var pitch = Cesium.Math.toRadians(-45.0);
    var range = 175.0;
    viewer.camera.lookAt(center, new Cesium.HeadingPitchRange(heading, pitch, range));

    viewer.scene.canvas.setAttribute('tabIndex', 1);

    // Act1 trigger
    viewer.screenSpaceEventHandler.setInputAction(function(action) {
      data.state["outside-west"] = { "color" : "RED",   "flashing" : true , "alpha" : 0.5 };
      var entity = new Cesium.Entity('External Weapon Alert');
      entity.name = 'Alert';
      entity.description = {
        getValue : function() {
          return '2 x Weapon Detected';
        }
      };
      viewer.selectedEntity = entity;
      setTimeout(function(){
        data.state["retractable-door"] = { "color" : "GREEN", "flashing" : true, "alpha" : 0.5 };
        var entity = new Cesium.Entity('External Action');
        entity.name = 'Action';
        entity.description = {
          getValue : function() {
            return 'Building Lockdown';
          }
        };
        viewer.selectedEntity = entity;
      }, 2000);
    }, Cesium.ScreenSpaceEventType.LEFT_DOWN);

    // Act1 reset
    /* viewer.screenSpaceEventHandler.setInputAction(function(action) {
      data.state["outside-west"] = { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false , "alpha" : 0.5 };
      data.state["retractable-door"] = { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 };
    }, Cesium.ScreenSpaceEventType.LEFT_UP);*/

    // Act2 trigger
    /*viewer.screenSpaceEventHandler.setInputAction(function(action) {
      data.state["reception-east"] = { "color" : "RED", "outlinecolor" : "BLACK", "flashing" : true, "alpha" : 0.5 };
      data.state["reception-west"] = { "color" : "RED", "outlinecolor" : "BLACK", "flashing" : true, "alpha" : 0.5 };
      var entity = new Cesium.Entity('Lobby Weapon Alert');
      entity.name = 'Alert';
      entity.description = {
        getValue : function() {
          return '1 x Weapon Detected';
        }
      };
      viewer.selectedEntity = entity;
      setTimeout(function(){
        data.state["nonlethal"] = { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : true, "alpha" : 0.5 };
        var entity = new Cesium.Entity('Nonlethal Action');
        entity.name = 'Action';
        entity.description = {
          getValue : function() {
            return 'Non-lethal Response';
          }
        };
        viewer.selectedEntity = entity;
      }, 2000);
    }, Cesium.ScreenSpaceEventType.MIDDLE_DOWN);*/

    // Act2 reset
    /* viewer.screenSpaceEventHandler.setInputAction(function(action) {
      data.state["reception-east"] = { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 };
      data.state["reception-west"] = { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 };
      data.state["nonlethal"] = { "color" : "GREEN", "outlinecolor" : "BLACK", "flashing" : false, "alpha" : 0.5 };
    }, Cesium.ScreenSpaceEventType.MIDDLE_UP); */

    // Act3 trigger
    viewer.screenSpaceEventHandler.setInputAction(function(action) {
      $.each(data.state, function( name, value ) {
        data.state[name].color = "BLACK";
        data.state[name].outlinecolor = "WHITE";
      });
      var entity = new Cesium.Entity('Cameras Disabled');
      entity.name = 'Alert';
      entity.description = {
        getValue : function() {
          return 'Cameras Disabled';
        }
      };
      viewer.selectedEntity = entity;
      setTimeout(function(){
        data.state["underground"].color = "WHITE";
        data.state["underground"].outlinecolor = "BLACK";
        var entity = new Cesium.Entity('Security Alarm Disabled');
        entity.name = 'Alert';
        entity.description = {
          getValue : function() {
            return 'Security Alarm Disabled';
          }
        };
        viewer.selectedEntity = entity;
        setTimeout(function(){
          data.state["underground"].color = "RED";
          data.state["underground"].outlinecolor = "WHITE";
          data.state["underground"].flashing = true;
          var entity = new Cesium.Entity('Anamoly Detected');
          entity.name = 'Alert';
          entity.description = {
            getValue : function() {
              return 'Anamoly Detected';
            }
          };
          viewer.selectedEntity = entity;
          data.state["nonlethal"].color = "RED";
          data.state["nonlethal"].outlinecolor = "WHITE";
          data.state["nonlethal"].flashing = true;
          setTimeout(function(){
	    var robotLat = lat + 0.0001300;
	    var robotLon = lon + 0.0000900;
            var robotPosition = Cesium.Cartesian3.fromDegrees(robotLat, robotLon, 100.0);
            var heading = Cesium.Math.toRadians(45.0);
            var pitch = Cesium.Math.toRadians(-90.0);
            //viewer.camera.lookAt(robotPosition, new Cesium.HeadingPitchRange(heading, pitch, range));
            //viewer.camera.flyTo( { destination : robotPosition, maximumHeight: 100, orientation: { heading : heading, pitch : pitch, roll : 0.0 } } );
            var robotInterval = setInterval(function(){
	      if(robotLon < lon + 0.000180) {
	        robotLon = robotLon + 0.000003;
	        robotLat = robotLat + 0.000002;
                devices["nonlethal"].position = Cesium.Cartesian3.fromDegrees(robotLat, robotLon, 1.0);
	      } else {
	        clearInterval(robotInterval);
                data.state["drone"].color = "RED";
                data.state["drone"].outlinecolor = "WHITE";
                data.state["drone"].flashing = true;
                setTimeout(function(){
	          var droneLat = lat + 0.000115;
	          var droneLon = lon + 0.0002900;
	          console.log("before droneLon: " + droneLon);
                  //var dronePosition = Cesium.Cartesian3.fromDegrees(droneLat, droneLon, 100.0);
                  var heading = Cesium.Math.toRadians(45.0);
                  var pitch = Cesium.Math.toRadians(-90.0);
                  //viewer.camera.lookAt(dronePosition, new Cesium.HeadingPitchRange(heading, pitch, range));
                  //viewer.camera.flyTo( { destination : dronePosition, maximumHeight: 100, orientation: { heading : heading, pitch : pitch, roll : 0.0 } } );
                  var height = 8.0;
                  var droneInterval = setInterval(function(){
	            if(droneLon < lon + 0.0003100) {
	              console.log("moving droneLon out: " + droneLon + " droneLat: " + droneLat + " height: " + height);
	              droneLon = droneLon + 0.0000010;
                      devices["drone"].position = Cesium.Cartesian3.fromDegrees(droneLat, droneLon, height);
	            } else {
	              console.log("stopping drone fly out droneLon: " + droneLon + " droneLat: " + droneLat + " height: " + height);
                      clearInterval(droneInterval);
                      var downDroneInterval = setInterval(function(){
	                if(height > 5.0) {
	                  height = height - 0.20;
                          devices["drone"].position = Cesium.Cartesian3.fromDegrees(droneLat, droneLon, height);
		        } else {
	                  console.log("stopping drone fly down droneLon: " + droneLon + " droneLat: " + droneLat + " height: " + height);
                          clearInterval(downDroneInterval);
		        }
                      }, 75);
                    }
	          }, 75);
                }, 1000);
	      }
	    }, 75);
          }, 2000);
        }, 2000);
      }, 2000);
    }, Cesium.ScreenSpaceEventType.MIDDLE_DOWN);

    // Act3 reset
    /* viewer.screenSpaceEventHandler.setInputAction(function(action) {
      data.state["reception-east"] = { "color" : "GREEN", "outlinecolor": "BLACK", "flashing" : false, "alpha" : 0.5 };
      data.state["reception-west"] = { "color" : "GREEN", "outlinecolor": "BLACK", "flashing" : false, "alpha" : 0.5 };
      data.state["nonlethal"] = { "color" : "GREEN", "flashing" : false, "alpha" : 0.5 };
    }, Cesium.ScreenSpaceEventType.MIDDLE_UP); */

    // All of the primitive entities we've added to the older model are relative to a lat/long that has shifted slightly
    // in the newer model. Instead of changing all of the relative offsets, just transform the model shift:
//    lat = lat + 0.000015;

    function addArc(pointA,pointB){
      var earth = Cesium.Ellipsoid.WGS84;
      // start and end points on the surface of the earth
      //var startPoint = earth.cartographicToCartesian(Cesium.Cartographic.fromDegrees(pointA[0][0], pointA[0][1], 0.0));
      //var endPoint = earth.cartographicToCartesian(Cesium.Cartographic.fromDegrees(pointB[0][0], pointB[0][1], 0.0));
      var startPoint = earth.cartographicToCartesian(pointA);
      var endPoint = earth.cartographicToCartesian(pointB);
      console.log(`addArc pointA=${pointA} startPoint=${startPoint} pointB=${pointB} endPoint=${endPoint}`);
      // determine the midpoint (point will be inside the earth)
      var midpointCartesian = startPoint.add(endPoint).divideByScalar(2.0);
      // move the midpoint to the surface of the earth
      earth.scaleToGeodeticSurface(midpointCartesian);
      // add some altitude if you want (10m in this case)
      var midpointCartographic = earth.cartesianToCartographic(midpointCartesian);
      midpointCartographic.height = 10;
      midpointCartesian = earth.cartographicToCartesian(midpointCartographic);
      // create a hermite spline that goes through these three points
      var hermiteSpline = new Cesium.HermiteSpline( [
        {point: startPoint, time: 0.0},
        {point: midpointCartesian, time: 0.5},
        {point: endPoint, time: 1.0}
      ]);
      // create a 20 point polyline that follows the spline
      var polylinePoints = [];
      for(var i=0; i<20; ++i) {
        polylinePoints.push(hermiteSpline.evaluate(i/20));
      }
      var polylineCollection = new Cesium.PolylineCollection();
      var polyline = polylineCollection.add();
      polyline.setPositions(polylinePoints);
      var primitives = viewer.scene.getPrimitives();
      primitives.add(polylineCollection);
    }

    devices["reception-west"] = viewer.entities.add({
      name : 'reception-west',
      position: Cesium.Cartesian3.fromDegrees(lat - 0.0000820, lon + 0.0000900, 6.0),
      box : {
        dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
        material : Cesium.Color.BLUE.withAlpha(0.5),
        outline : true,
	outlineWidth : 2,
        outlineColor : Cesium.Color.BLACK
      }
    })

    devices["nonlethal"] = viewer.entities.add({
      name : 'nonlethal',
      position: Cesium.Cartesian3.fromDegrees(lat + 0.0001300, lon + 0.0000900, 1.0),
      box : {
        dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
        material : Cesium.Color.BLUE.withAlpha(0.5),
        outline : true,
	outlineWidth : 2,
        outlineColor : Cesium.Color.BLACK
      }
    });

    devices["reception-east"] = viewer.entities.add({
      name : 'reception-east',
      position: Cesium.Cartesian3.fromDegrees(lat + 0.0002200, lon + 0.0000900, 6.0),
      box : {
        dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
        material : Cesium.Color.BLUE.withAlpha(0.5),
        outline : true,
	outlineWidth : 2,
        outlineColor : Cesium.Color.BLACK
      }
   });

   devices["outside-west"] = viewer.entities.add({
     name : 'outside-west',
     position: Cesium.Cartesian3.fromDegrees(lat - 0.0006200, lon + 0.0002700, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["outside-north-west"] = viewer.entities.add({
     name : 'outside-north-west',
     position: Cesium.Cartesian3.fromDegrees(lat - 0.000320, lon + 0.0002900, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["outside-north"] = viewer.entities.add({
     name : 'outside-north',
     position: Cesium.Cartesian3.fromDegrees(lat - 0.000100, lon + 0.0002900, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["drone"] = viewer.entities.add({
     name : 'drone',
     position: Cesium.Cartesian3.fromDegrees(lat + 0.000115, lon + 0.0002900, 7.0),
     box : {
       dimensions : new Cesium.Cartesian3(0.75, 0.75, 0.75),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["retractable-door"] = viewer.entities.add({
     name : 'retractable-door',
     position: Cesium.Cartesian3.fromDegrees(lat + 0.000115, lon + 0.0002900, 3.0),
     box : {
       dimensions : new Cesium.Cartesian3(12.25, 1.25, 6.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["outside-north-east"] = viewer.entities.add({
     name : 'outside-north-east',
     position: Cesium.Cartesian3.fromDegrees(lat + 0.000220, lon + 0.0002900, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["dirtywerx-ramp"] = viewer.entities.add({
     name : 'dirtywerx-ramp',
     position: Cesium.Cartesian3.fromDegrees(lat + 0.000378, lon - 0.0000900, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["dirtywerx-north"] = viewer.entities.add({
     name : 'dirtywerx-north',
     position: Cesium.Cartesian3.fromDegrees(lat + 0.000235, lon + 0.0001300, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["dirtywerx-south"] = viewer.entities.add({
     name : 'dirtywerx-south',
     position: Cesium.Cartesian3.fromDegrees(lat + 0.0003, lon + 0.0000900, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["thunderdrone-east"] = viewer.entities.add({
     name : 'thunderdrone-east',
     position: Cesium.Cartesian3.fromDegrees(lat - 0.000220, lon + 0.0002800, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["thunderdrone-west"] = viewer.entities.add({
     name : 'thunderdrone-west',
     position: Cesium.Cartesian3.fromDegrees(lat - 0.000420, lon + 0.0002800, 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   devices["staff-area"] = viewer.entities.add({
     name : 'staff-area',
     position: Cesium.Cartesian3.fromDegrees(lat + 0.0000190, lon - 0.00005 , 6.0),
     box : {
       dimensions : new Cesium.Cartesian3(1.25, 1.25, 1.25),
       material : Cesium.Color.BLUE.withAlpha(0.5),
       outline : true,
       outlineWidth : 2,
       outlineColor : Cesium.Color.BLACK
     }
   });

   var colorizeInterval

   var colorizePeriod = 500

   function colorize() {
     if(data && data.state) {
       $.each(data.state, function( name, value ) {
         config = data.state[name]
         colorname = config["color"]
         outlinecolorname = config["outlinecolor"]
         flashing = config["flashing"]
         if(flashing) {
           if(config["alpha"] == 0.5) {
             config["alpha"] = 1.0;
           } else {
             config["alpha"] = 0.5;
           }
	 } else {
           config["alpha"] = 0.5;
	 }
         alpha = config["alpha"]
         device = devices[name]
         if(device) {
           var color = Cesium.Color[colorname].withAlpha(alpha)
           var outlinecolor = Cesium.Color[outlinecolorname].withAlpha(alpha)
           if(device.box) {
             device.box.material = color;
             device.box.outlineColor = outlinecolor;
             //console.log("Coloring the model " + name + " color " + colorname + " outlinecolor " + outlinecolorname);
           } else {
             if(device.color) {
               device.color = color
               device.outlineColor = outlinecolor
               //console.log("Coloring the device " + name + " color " + colorname + " outlinecolor " + outlinecolorname);
             //} else {
               //console.log(`Cannot find device.box or device.color for ${name}`)
             }
           }
         } else {
           console.log(`Cannot find device state for ${name}`)
         }
       })
     }
   }

   colorizeInterval = setInterval(colorize, colorizePeriod)

  </script>
</body>
</html>
